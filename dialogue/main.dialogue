~ start

Coco: Tutoriais disponíveis:
- ☆ Conceitos de programação
	=> conceitos_basicos
- ☆ Como jogar
	=> regras
- ☆ Aprenda Bubble Sort
	Coco: Repare bem no número da caixa no ☆vetor[0]☆
	Coco: Agora no número da caixa vizinha da direita, ou seja, no ☆vetor[1]☆
	Coco: Qual número é maior?
	Coco: Caso o número do ☆vetor[0]☆ seja maior que o número do ☆vetor[1]☆, alterne as duas de lugar entre si, colocando uma no lugar da outra, basicamente.
	Coco: Você vai precisar usar a ☆var temp☆ para te ajudar nisso, já que não pode colocar mais de uma caixa na mesma PLATAFORMA.
	Coco: Se o número no ☆vetor[1]☆ for maior você não precisa fazer nada.
	Coco: Estamos tentando organizar as caixas em ordem crescente, não faria sentido trocar, pense bem.
	Coco: Agora compare a caixa no ☆vetor[1]☆ com a caixa no ☆vetor[2]☆.
	Coco: E depois o ☆vetor[3]☆ com o ☆vetor[4]☆, sempre comparando de duas em duas.
	Coco: Quando chegar no final e não estiver organizado ainda, volte a comparar as duas primeiras caixas novamente.
	Coco: E assim por diante até tudo ficar organizado e você ganhar!!!
	Coco: Trabalhoso, não? Sorte que não são 1 milhão de plataformas.
	=> start
- ☆ Aprenda Shaker Sort
	Coco: Funciona muito parecido com o ☆Bubble Sort☆
	Coco: Você precisa saber ele antes desse... ou não?
	Coco: Bem, é simples: Bubble compara as caixas de duas em duas da esquerda para direita, começando do começo até o fim.
	Coco: E depois disso, volta novamente para o ínicio e vai até o fim, até finalmente organizar tudo.
	Coco: No ☆Shaker Sort☆ é quase assim, você também compara as caixas de duas em duas da esquerda para direita começando com o ☆vetor[0]☆ e o ☆vetor[1]☆.
	Coco: Mas quando chegar no fim das caixas, você não volta para o começo se não estiver organizado como antes. 
	Coco: Na verdade, você compara ao contrário agora... ora, da direita para esquerda, o ☆vetor[4]☆ com o ☆vetor[3]☆, assim por diante, entendeu?
	Coco: E quando chegar no começo e não estiver organizado ainda, você compara agora da esquerda para direita normalmente, quando chegar no final, novamente, você vai comparar ao contrário.
	Coco: E assim por diante, multíplas vezes... boa sorte nessa.
	=> start
- ☆ Aprenda Selection Sort
	Coco: Você quer jogar no nível HARD, então não vou te ajudar muito... é pra ser díficil, afinal.
	Coco: Agora você vai comparar do final para o começo, mas não de dois em dois como antes.
	Coco: Imagine que você tem dois loops acontecendo ao mesmo tempo dessa vez.
	Coco: Vamos chamar o primeiro de ☆loop externo☆. Ele vai começar no final do ☆vetor☆ e sempre que completar o loop o final vai se tornar o [final anterior-1].
	Coco: O segundo vai comparar a última caixa no ☆loop externo☆ com as caixas dentro desse loop, é claro, da esquerda para a direita.
	Coco: Quando ele achar alguma caixa maior, elas vão alternar de lugar e o loop terá fim e o final do loop externo vai ser [final anterior-1].
	Coco: Alguma hora não vai ter mais como reduzir o tamanho do loop externo ou as caixas estarão organizadas. Um dos dois.
	Coco: Ha. Ha. Boa sorte. Ha. Ha. Ha.
	=> start
- [JOGAR]
	=> choice
=> END

~ choice

Coco: Escolha uma fase:
- [EASY] Bubble sort
	do set_sort_type("bubble_sort")
- [MEDIUM] Shaker sort
	do set_sort_type("shaker_sort")
- [HARD] Selection sort
	do set_sort_type("selection_sort")
- [APRENDER]
	=> start
Coco: GLHF!!!

=> END

~ help

Nathan: Você perdeu 5 segundos....[next=true]

=> END

~ lucky

Nathan: ☆ Você tem muita sorte ☆

=> END

~ conceitos_basicos

Coco: Sobre o que você quer aprender primeiro?
- ☆ Váriavel
	Coco: Cada plataforma é um espaço onde você pode despejar uma caixa. Cada caixa tem um número nela. 
	Coco: Na programação, uma váriavel é usada para guardar valores. 
	Coco: Agora associando as duas coisas, cada plataforma nesse jogo é uma ☆váriavel☆ e cada caixa com um número que ficar encima dela tem um valor do tipo ☆inteiro☆. 
	Coco: Enfim, uma váriavel do tipo ☆inteiro☆ pode armazenar um número entre −2.147.483.648 e 2.147.483.647...
	Coco: Computadores são limitados, não podemos armazenar números muito grandes ou infinitos...
	Coco: Mas no nosso jogo vamos usar só números entre 1 e 5, ok? Não se assuste...
	Coco: Agora, temos várias plataformas, certo?
	Coco: Todas elas tem algo em comum que é guardar um número inteiro apenas, logo são homogêneas. Não vai ter uma plataforma que guarda caixas com letras dentro.
	Coco: Estão em uma fila linear, uma do lado da outra, logo são unidimensionais.
	Coco: Vetores na programação são exatamente isso.
	Coco: Repare também que as plataformas vetores sempre tem um ☆[número]☆ no nome delas e que ele começa no 0 e vai até 4, correto?
	Coco: Vetores tem o que chamamos de INDEX que é exatamente esse número, ele serve para você localizar ele.
	Coco: Então, se quiser saber o número do terceiro vetor, o que fazer? 
	Coco: Simplesmente buscamos pelo ☆vetor[2]☆, ou seja com INDEX 2. 
	Coco: Lembre-se que o primeiro INDEX sempre é 0.
	=> conceitos_basicos
- ☆ Loop
	Coco: Agora imagine que você tenha que criar 5 plataformas [ou varíaveis] e colocar números de 1 a 5 dentro delas, como você faria isso?
	Coco: Criaria a primeira e colocaria o número 1 dentro dela, depois criaria a segunda e colocaria o número 2 dentro dela, e depois a terceira... e depois a quarta... e depois a quinta...
	Coco: Percebe como isso parece repetitivo?
	Coco: Imagine se fossem 1 milhão de plataformas agora... quanto tempo levaria?
	Coco: Por isso existem loops, você coloca a criação da plataforma dentro desse loop e define quantas vezes esse loop vai repetir.
	Coco: Dessa forma, para criar 1 milhão de plataformas, você cria um loop que se repete por 1 milhão de vezes criando uma plataforma sempre que for executado.
	Coco: Essa repetição é exatamente o que vai acontecer quando você for organizar as caixas.
	=> conceitos_basicos
- [Voltar]
	=> start
=> END

~ regras

Coco: Como jogar:
- ☆ Objetivo
	Coco: Seu objetivo é organizar as caixas em ordem númerica e resolver o enigma.
	Coco: Cada caixa tem um número dentro e as plataformas só aceitam uma caixa por vez.
	Coco: E cuidado, você tem um tempo máximo para ganhar.
	Coco: Você tem 60 segundos para resolver o enigma de cada loop do jogo.
	Coco: Ao acabar o tempo, você perde.
	Coco: Mas o tempo reiniciará sempre que você ganhar uma moeda.
	Coco: Você ganha uma moeda se resolver o enigma.
	Coco: Por fim, você tem 6 vidas no total, sendo divididas em 3 corações.
	Coco: Sempre que levantar ou soltar uma caixa perderá meio coração.
	=> regras
- ☆ Controles
	Coco: Aperte as ☆SETAS☆ no seu teclado para andar.
	Coco: Aperte ☆ESPAÇO☆ para levantar uma caixa.
	Coco: Aperte ☆CTRL☆ para soltar essa caixa.
	Coco: Só pode soltar caixas quando estiver encima de um ☆[vetor]☆ ou da ☆[var temp]☆.
	Coco: Aperte ☆H☆ para pedir ajuda, será exibido a resposta da fase por 10 segundos. 
	Coco: Mas você vai perder 5 segundos de tempo.
	=> regras
- [Voltar]
	=> start

=> END