[gd_scene load_steps=10 format=3 uid="uid://c3cnuo6fb5ifc"]

[ext_resource type="PackedScene" uid="uid://cpakfslut0sdy" path="res://nodes/tile_map.tscn" id="2_h0wxj"]
[ext_resource type="Script" path="res://Scripts/player.gd" id="3_llrny"]
[ext_resource type="PackedScene" uid="uid://c0tr5ncyq4dk1" path="res://nodes/player.tscn" id="3_tgp7n"]
[ext_resource type="PackedScene" uid="uid://46m8i6xoqsmn" path="res://nodes/box_1.tscn" id="4_m56p2"]
[ext_resource type="PackedScene" uid="uid://d4ejmido4py1o" path="res://nodes/platformNode.tscn" id="5_lf2ox"]

[sub_resource type="GDScript" id="GDScript_ansbe"]
script/source = "extends Node2D
@onready var player = $Player
@onready var boxes_nodes = get_tree().get_nodes_in_group(\"boxes\")
@onready var platforms_nodes = get_tree().get_nodes_in_group(\"Platform\")
@onready var label = $Help

var numbers = []
var steps = []
var current_step = 0
var used_numbers : Array = []

func _ready():
	randomize()
	
	for i in range(boxes_nodes.size()):
		var unique_number = generate_unique_random()
		numbers.append(unique_number)
		boxes_nodes[i].number = unique_number
	
	#signal
	player.no_lifes.connect(analyse_step)
	
	#debug
	#selection_sort, bubble_sort, shaker_sort
	shaker_sort(numbers)
	next_step()
	
	label.set_text(\"help: \" + str(current_step) + \" -> \" + str(steps[current_step]))

func _unhandled_input(_event):
	if Input.is_action_just_pressed(\"ui_help\"):
		DialogueManager.show_example_dialogue_balloon(load(\"res://dialogue/main.dialogue\"), \"start\")
		return
	if Input.is_action_just_pressed(\"ui_accept\"):
		#get_tree().paused = not get_tree().paused
		pass

func bubble_sort(arr):
	var n = arr.size()
	var swapped
	var temp_arr = []
	
	register_step(arr, temp_arr)
	temp_arr = []
	
	while swapped != false:
		swapped = false
		for i in range(1, n):
			if arr[i-1] > arr[i]:
				#debug
				print(\"swap: \", arr[i - 1],\" -> \", arr[i])
				
				var temp = arr[i - 1]
				arr[i - 1] = arr[i]
				arr[i] = temp
				swapped = true
				
				# registrar cada passo
				register_step(arr, temp_arr)
				
				temp_arr = []
		#n -= 1 -----otimização

func selection_sort(arr):
	var temp_arr = []
	var n = arr.size()
	var pos_greatest
	var temp
	
	register_step(arr, temp_arr)
	print(\"original: \", temp_arr)
	temp_arr = []
	
	for i in range(n-1, 1, -1):
		pos_greatest = 0
		
		for j in range(i):
			if arr[j] > arr[pos_greatest]:
				pos_greatest = j
		temp = arr[i]
		arr[i] = arr[pos_greatest]
		arr[pos_greatest] = temp
		
		# registrar cada passo
		register_step(arr, temp_arr)
		temp_arr = []
		
	print(steps)

func shaker_sort(arr):
	var temp_arr = []
	var n = arr.size()
	var temp
	var swap: bool
	
	register_step(arr, temp_arr)
	print(\"original: \", temp_arr)
	temp_arr = []
	
	swap = true
	while(swap):
		swap = false
		#left-right
		for i in range(n-1):
			if arr[i] > arr[i+1]:
				temp = arr[i]
				arr[i] = arr[i + 1]
				arr[i + 1] = temp
				swap = true
				
				register_step(arr, temp_arr)
				temp_arr = []
		if not swap:
			break
		swap = false
		#right-left
		for i in range(n-2, 0, -1):
			if arr[i] > arr[i+1]:
				temp = arr[i]
				arr[i] = arr[i+1]
				arr[i+1] = temp
				swap = true
				
				register_step(arr, temp_arr)
				temp_arr = []
		
		print(\"steps: \", steps)

func register_step(arr, temp_arr):
	for item in arr:
		temp_arr.append(item)
	steps.append(temp_arr)

func generate_unique_random():
	var random_number = -1
	while true:
		random_number = randi_range(1, 5)
		if used_numbers.find(random_number) == -1:
			used_numbers.append(random_number)
			break
	return random_number

func analyse_step():
	for n in range(1, platforms_nodes.size()):
		if not platforms_nodes[n].current_number == steps[current_step][n-1]:
			gameover()
			return
	next_step()

func gameover():
	label.set_text(\"Game over!\")
	pass

func next_step():
	if current_step < steps.size()-1:
		current_step += 1
		player.renew_life()
		label.set_text(\"help: \" + str(current_step) + \" -> \" + str(steps[current_step]))
		return
	label.set_text(\"Win!\")
"

[sub_resource type="Animation" id="Animation_86bym"]
resource_name = "new_animation"

[sub_resource type="AnimationLibrary" id="AnimationLibrary_1aqv4"]
_data = {
"new_animation": SubResource("Animation_86bym")
}

[sub_resource type="LabelSettings" id="LabelSettings_p5my3"]
font_size = 34

[node name="World" type="Node2D"]
process_mode = 3
script = SubResource("GDScript_ansbe")

[node name="TileMap" parent="." instance=ExtResource("2_h0wxj")]
light_mask = 2
visibility_layer = 2
texture_filter = 3

[node name="Player" parent="." instance=ExtResource("3_tgp7n")]
process_mode = 1
texture_filter = 4
texture_repeat = 1
position = Vector2(133, 48)
script = ExtResource("3_llrny")

[node name="PointLight2D" parent="Player" index="0"]
light_mask = 2
visibility_layer = 2
position = Vector2(-2, -62)
color = Color(0.686275, 0.996078, 0.909804, 0.568627)
energy = 1.18
range_item_cull_mask = 2
shadow_item_cull_mask = 3
texture_scale = 2.25

[node name="boxes" type="Node2D" parent="."]

[node name="Box1" parent="boxes" instance=ExtResource("4_m56p2")]
position = Vector2(400, 80)
lock_rotation = true

[node name="Box2" parent="boxes" instance=ExtResource("4_m56p2")]
position = Vector2(560, 80)
lock_rotation = true

[node name="Box3" parent="boxes" instance=ExtResource("4_m56p2")]
position = Vector2(720, 80)
lock_rotation = true

[node name="Box4" parent="boxes" instance=ExtResource("4_m56p2")]
position = Vector2(880, 80)
lock_rotation = true

[node name="Box5" parent="boxes" instance=ExtResource("4_m56p2")]
position = Vector2(1040, 80)
lock_rotation = true

[node name="Platforms" type="Node2D" parent="."]

[node name="Plat0" parent="Platforms" instance=ExtResource("5_lf2ox")]
position = Vector2(128, 160)

[node name="Label" parent="Platforms/Plat0" index="2"]
offset_left = -38.0
offset_top = 0.0
offset_right = 41.0
offset_bottom = 29.0
text = "var temp"

[node name="Plat1" parent="Platforms" instance=ExtResource("5_lf2ox")]
position = Vector2(400, 192)

[node name="Label" parent="Platforms/Plat1" index="2"]
offset_left = -33.0
offset_top = 1.0
offset_right = 36.0
offset_bottom = 30.0
text = "vetor[0]"

[node name="Plat2" parent="Platforms" instance=ExtResource("5_lf2ox")]
position = Vector2(560, 192)

[node name="Label" parent="Platforms/Plat2" index="2"]
offset_left = -33.0
offset_top = 1.0
offset_right = 36.0
offset_bottom = 30.0
text = "vetor[1]"

[node name="Plat3" parent="Platforms" instance=ExtResource("5_lf2ox")]
position = Vector2(720, 192)

[node name="Label" parent="Platforms/Plat3" index="2"]
offset_left = -31.0
offset_top = 1.0
offset_right = 38.0
offset_bottom = 30.0
text = "vetor[2]"

[node name="Plat4" parent="Platforms" instance=ExtResource("5_lf2ox")]
position = Vector2(880, 192)

[node name="Label" parent="Platforms/Plat4" index="2"]
offset_left = -34.0
offset_top = 1.0
offset_right = 35.0
offset_bottom = 30.0
text = "vetor[3]"

[node name="Plat5" parent="Platforms" instance=ExtResource("5_lf2ox")]
position = Vector2(1040, 192)

[node name="Label" parent="Platforms/Plat5" index="2"]
offset_left = -34.0
offset_top = 0.0
offset_right = 35.0
offset_bottom = 29.0
text = "vetor[4]"

[node name="DirectionalLight2D" type="DirectionalLight2D" parent="."]
position = Vector2(-16, 16)
rotation = -0.71384
skew = 0.417134
color = Color(0.177156, 0.362108, 0.419841, 1)
energy = 0.54
shadow_enabled = true
shadow_filter = 2
shadow_filter_smooth = 1.5

[node name="CanvasModulate" type="CanvasModulate" parent="."]
position = Vector2(-16, -8)
color = Color(0.584314, 0.631373, 0.952941, 1)

[node name="AnimationPlayer" type="AnimationPlayer" parent="CanvasModulate"]
libraries = {
"": SubResource("AnimationLibrary_1aqv4")
}

[node name="Help" type="Label" parent="."]
offset_left = 573.0
offset_top = 332.0
offset_right = 676.0
offset_bottom = 382.0
grow_horizontal = 2
grow_vertical = 2
text = "debug"
label_settings = SubResource("LabelSettings_p5my3")

[editable path="Player"]
[editable path="boxes/Box1"]
[editable path="Platforms/Plat0"]
[editable path="Platforms/Plat1"]
[editable path="Platforms/Plat2"]
[editable path="Platforms/Plat3"]
[editable path="Platforms/Plat4"]
[editable path="Platforms/Plat5"]
